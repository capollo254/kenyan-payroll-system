{"ast":null,"code":"// src/api/employees.js\nimport api from'./auth';/**\r\n * A helper function to get the authentication headers.\r\n * This ensures that every request to a protected endpoint includes the user's token.\r\n * @returns {object} The headers object with the Authorization token.\r\n */const getAuthHeaders=()=>{const token=localStorage.getItem('token');if(!token){throw new Error(\"No authentication token found. Please log in.\");}return{headers:{Authorization:\"Token \".concat(token)}};};/**\r\n * Fetches a list of all employees from the backend.\r\n * This is typically an admin-only endpoint.\r\n * @returns {Promise<Array>} A list of employee objects.\r\n */export const getEmployees=async()=>{try{// First, try to get the count of total employees\nconst response=await api.get('employees/employees/?page_size=100',getAuthHeaders());// Handle paginated response - return just the results array\nif(response.data&&typeof response.data==='object'&&'results'in response.data){let allEmployees=response.data.results;// If there are more pages, fetch them all\nif(response.data.next){let nextUrl=response.data.next;while(nextUrl){const nextResponse=await api.get(nextUrl.replace(api.defaults.baseURL,''),getAuthHeaders());allEmployees=[...allEmployees,...nextResponse.data.results];nextUrl=nextResponse.data.next;}}return allEmployees;}// Fallback for non-paginated response\nreturn Array.isArray(response.data)?response.data:[];}catch(error){console.error('Error fetching employees:',error);throw error;}};/**\r\n * Fetches the current user's employee profile.\r\n * @returns {Promise<object>} The current user's employee object.\r\n */export const getMyProfile=async()=>{try{const response=await api.get('employees/employees/me/',getAuthHeaders());return response.data;}catch(error){console.error('Error fetching my profile:',error);throw error;}};/**\r\n * Fetches a single employee's details by their ID.\r\n * @param {number} employeeId - The ID of the employee to fetch.\r\n * @returns {Promise<object>} The employee object.\r\n */export const getEmployee=async employeeId=>{try{const response=await api.get(\"employees/employees/\".concat(employeeId,\"/\"),getAuthHeaders());return response.data;}catch(error){console.error(\"Error fetching employee with ID \".concat(employeeId,\":\"),error);throw error;}};/**\r\n * Creates a new employee by sending a POST request to the backend.\r\n * @param {object} employeeData - The data for the new employee.\r\n * @returns {Promise<object>} The newly created employee object.\r\n */export const createEmployee=async employeeData=>{try{const response=await api.post('employees/employees/',employeeData,getAuthHeaders());return response.data;}catch(error){console.error('Error creating new employee:',error);throw error;}};/**\r\n * Updates an existing employee by their ID.\r\n * @param {number} employeeId - The ID of the employee to update.\r\n * @param {object} employeeData - The updated data for the employee.\r\n * @returns {Promise<object>} The updated employee object.\r\n */export const updateEmployee=async(employeeId,employeeData)=>{try{const response=await api.put(\"employees/employees/\".concat(employeeId,\"/\"),employeeData,getAuthHeaders());return response.data;}catch(error){console.error(\"Error updating employee with ID \".concat(employeeId,\":\"),error);throw error;}};/**\r\n * Deletes an employee by their ID.\r\n * @param {number} employeeId - The ID of the employee to delete.\r\n * @returns {Promise<void>}\r\n */export const deleteEmployee=async employeeId=>{try{await api.delete(\"employees/employees/\".concat(employeeId,\"/\"),getAuthHeaders());}catch(error){console.error(\"Error deleting employee with ID \".concat(employeeId,\":\"),error);throw error;}};// ========== BANKING INFORMATION ENDPOINTS ==========\n/**\r\n * Fetches the current user's banking details.\r\n * @returns {Promise<object>} The current user's banking information.\r\n */export const getMyBankingDetails=async()=>{try{const response=await api.get('employees/employees/banking_details/',getAuthHeaders());return response.data;}catch(error){console.error('Error fetching my banking details:',error);throw error;}};/**\r\n * Fetches banking details for a specific employee by ID (admin only).\r\n * @param {number} employeeId - The ID of the employee.\r\n * @returns {Promise<object>} The employee's banking information.\r\n */export const getBankingDetailsByEmployeeId=async employeeId=>{try{const response=await api.get(\"employees/employees/\".concat(employeeId,\"/banking_details_by_id/\"),getAuthHeaders());return response.data;}catch(error){console.error(\"Error fetching banking details for employee ID \".concat(employeeId,\":\"),error);throw error;}};/**\r\n * Updates the current user's banking details.\r\n * @param {object} bankingData - The banking data to update.\r\n * @param {string} [bankingData.bank_name] - Full bank name.\r\n * @param {string} [bankingData.bank_code] - Central Bank assigned bank code.\r\n * @param {string} [bankingData.bank_branch] - Bank branch name.\r\n * @param {string} [bankingData.bank_branch_code] - Specific branch code.\r\n * @param {string} [bankingData.bank_account_number] - Bank account number.\r\n * @param {string} [bankingData.account_type] - Type of account (savings, current, fixed).\r\n * @param {string} [bankingData.account_holder_name] - Account holder name.\r\n * @param {string} [bankingData.mobile_money_provider] - Mobile money provider.\r\n * @param {string} [bankingData.mobile_money_number] - Mobile money phone number.\r\n * @returns {Promise<object>} The updated banking information.\r\n */export const updateMyBankingDetails=async bankingData=>{try{const response=await api.put('employees/employees/update_banking_details/',bankingData,getAuthHeaders());return response.data;}catch(error){console.error('Error updating banking details:',error);throw error;}};/**\r\n * Partially updates the current user's banking details.\r\n * @param {object} bankingData - The banking data to update (partial).\r\n * @returns {Promise<object>} The updated banking information.\r\n */export const patchMyBankingDetails=async bankingData=>{try{const response=await api.patch('employees/employees/update_banking_details/',bankingData,getAuthHeaders());return response.data;}catch(error){console.error('Error partially updating banking details:',error);throw error;}};/**\r\n * Fetches employees with incomplete banking information (admin only).\r\n * @returns {Promise<object>} Object containing count and list of employees with incomplete banking.\r\n */export const getEmployeesWithIncompleteBanking=async()=>{try{const response=await api.get('employees/employees/employees_with_incomplete_banking/',getAuthHeaders());return response.data;}catch(error){console.error('Error fetching employees with incomplete banking:',error);throw error;}};// ========== BANKING UTILITY FUNCTIONS ==========\n/**\r\n * Validates banking information completeness.\r\n * @param {object} bankingData - The banking data to validate.\r\n * @returns {object} Validation result with isComplete flag and missing fields.\r\n */export const validateBankingInfo=bankingData=>{const requiredFields=['bank_name','bank_code','bank_branch','bank_branch_code','bank_account_number','account_type'];const missingFields=requiredFields.filter(field=>!bankingData[field]||bankingData[field].toString().trim()==='');return{isComplete:missingFields.length===0,missingFields:missingFields,completionPercentage:Math.round((requiredFields.length-missingFields.length)/requiredFields.length*100)};};/**\r\n * Formats banking information for display.\r\n * @param {object} bankingData - The banking data to format.\r\n * @returns {object} Formatted banking information.\r\n */export const formatBankingInfo=bankingData=>{if(!bankingData)return null;return{displayName:\"\".concat(bankingData.bank_name||'Unknown Bank'),fullAccountInfo:\"\".concat(bankingData.bank_name||'N/A',\" - \").concat(bankingData.bank_account_number||'No Account'),branchInfo:\"\".concat(bankingData.bank_branch||'N/A',\" (\").concat(bankingData.bank_branch_code||'N/A',\")\"),accountTypeDisplay:bankingData.account_type_display||'Not specified',mobileMoneyInfo:bankingData.mobile_money_provider_display&&bankingData.mobile_money_number?\"\".concat(bankingData.mobile_money_provider_display,\": \").concat(bankingData.mobile_money_number):'Not configured',isComplete:bankingData.has_complete_banking_info||false};};/**\r\n * Gets available bank account types for dropdowns.\r\n * @returns {Array} Array of account type options.\r\n */export const getAccountTypes=()=>[{value:'savings',label:'Savings Account'},{value:'current',label:'Current Account'},{value:'fixed',label:'Fixed Deposit Account'}];/**\r\n * Gets available mobile money providers for dropdowns.\r\n * @returns {Array} Array of mobile money provider options.\r\n */export const getMobileMoneyProviders=()=>[{value:'mpesa',label:'M-Pesa (Safaricom)'},{value:'airtel',label:'Airtel Money'},{value:'tkash',label:'T-Kash (Telkom)'},{value:'equitel',label:'Equitel'}];/**\r\n * Gets common Kenyan banks for dropdowns.\r\n * @returns {Array} Array of bank options with codes.\r\n */export const getKenyanBanks=()=>[{name:'KCB Bank Kenya Limited',code:'01'},{name:'Standard Chartered Bank Kenya Limited',code:'02'},{name:'Barclays Bank of Kenya Limited',code:'03'},{name:'Bank of Baroda (Kenya) Limited',code:'05'},{name:'Kenya Commercial Bank Limited',code:'01'},{name:'Citibank N.A Kenya',code:'16'},{name:'Habib Bank A.G Zurich',code:'17'},{name:'Middle East Bank Kenya Limited',code:'18'},{name:'Bank of Africa Kenya Limited',code:'19'},{name:'Prime Bank Limited',code:'10'},{name:'Co-operative Bank of Kenya Limited',code:'11'},{name:'National Bank of Kenya Limited',code:'12'},{name:'Oriental Commercial Bank Limited',code:'14'},{name:'Chase Bank Kenya Limited',code:'30'},{name:'Stanbic Bank Kenya Limited',code:'31'},{name:'Consolidated Bank of Kenya Limited',code:'23'},{name:'Credit Bank Limited',code:'25'},{name:'Equity Bank Kenya Limited',code:'68'},{name:'Family Bank Limited',code:'70'},{name:'Guaranty Trust Bank (Kenya) Limited',code:'53'},{name:'Guardian Bank Limited',code:'55'},{name:'Gulf African Bank Limited',code:'72'},{name:'I&M Bank Limited',code:'57'},{name:'Jamii Bora Bank Limited',code:'51'},{name:'UBA Kenya Bank Limited',code:'76'},{name:'Victoria Commercial Bank Limited',code:'54'},{name:'Diamond Trust Bank Kenya Limited',code:'63'},{name:'Ecobank Kenya Limited',code:'43'},{name:'Sidian Bank Limited',code:'74'},{name:'ABC Bank (Kenya) Limited',code:'35'},{name:'Mayfair Bank Limited',code:'65'}];","map":{"version":3,"names":["api","getAuthHeaders","token","localStorage","getItem","Error","headers","Authorization","concat","getEmployees","response","get","data","allEmployees","results","next","nextUrl","nextResponse","replace","defaults","baseURL","Array","isArray","error","console","getMyProfile","getEmployee","employeeId","createEmployee","employeeData","post","updateEmployee","put","deleteEmployee","delete","getMyBankingDetails","getBankingDetailsByEmployeeId","updateMyBankingDetails","bankingData","patchMyBankingDetails","patch","getEmployeesWithIncompleteBanking","validateBankingInfo","requiredFields","missingFields","filter","field","toString","trim","isComplete","length","completionPercentage","Math","round","formatBankingInfo","displayName","bank_name","fullAccountInfo","bank_account_number","branchInfo","bank_branch","bank_branch_code","accountTypeDisplay","account_type_display","mobileMoneyInfo","mobile_money_provider_display","mobile_money_number","has_complete_banking_info","getAccountTypes","value","label","getMobileMoneyProviders","getKenyanBanks","name","code"],"sources":["C:/Users/Code_AI/Documents/Bloom HR and Payroll/kenyan-payroll-system/frontend/src/api/employees.js"],"sourcesContent":["// src/api/employees.js\r\n\r\nimport api from './auth';\r\n\r\n/**\r\n * A helper function to get the authentication headers.\r\n * This ensures that every request to a protected endpoint includes the user's token.\r\n * @returns {object} The headers object with the Authorization token.\r\n */\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    throw new Error(\"No authentication token found. Please log in.\");\r\n  }\r\n  return {\r\n    headers: {\r\n      Authorization: `Token ${token}`,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Fetches a list of all employees from the backend.\r\n * This is typically an admin-only endpoint.\r\n * @returns {Promise<Array>} A list of employee objects.\r\n */\r\nexport const getEmployees = async () => {\r\n  try {\r\n    // First, try to get the count of total employees\r\n    const response = await api.get('employees/employees/?page_size=100', getAuthHeaders());\r\n    \r\n    // Handle paginated response - return just the results array\r\n    if (response.data && typeof response.data === 'object' && 'results' in response.data) {\r\n      let allEmployees = response.data.results;\r\n      \r\n      // If there are more pages, fetch them all\r\n      if (response.data.next) {\r\n        let nextUrl = response.data.next;\r\n        while (nextUrl) {\r\n          const nextResponse = await api.get(nextUrl.replace(api.defaults.baseURL, ''), getAuthHeaders());\r\n          allEmployees = [...allEmployees, ...nextResponse.data.results];\r\n          nextUrl = nextResponse.data.next;\r\n        }\r\n      }\r\n      \r\n      return allEmployees;\r\n    }\r\n    // Fallback for non-paginated response\r\n    return Array.isArray(response.data) ? response.data : [];\r\n  } catch (error) {\r\n    console.error('Error fetching employees:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches the current user's employee profile.\r\n * @returns {Promise<object>} The current user's employee object.\r\n */\r\nexport const getMyProfile = async () => {\r\n  try {\r\n    const response = await api.get('employees/employees/me/', getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching my profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a single employee's details by their ID.\r\n * @param {number} employeeId - The ID of the employee to fetch.\r\n * @returns {Promise<object>} The employee object.\r\n */\r\nexport const getEmployee = async (employeeId) => {\r\n  try {\r\n    const response = await api.get(`employees/employees/${employeeId}/`, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching employee with ID ${employeeId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a new employee by sending a POST request to the backend.\r\n * @param {object} employeeData - The data for the new employee.\r\n * @returns {Promise<object>} The newly created employee object.\r\n */\r\nexport const createEmployee = async (employeeData) => {\r\n  try {\r\n    const response = await api.post('employees/employees/', employeeData, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating new employee:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates an existing employee by their ID.\r\n * @param {number} employeeId - The ID of the employee to update.\r\n * @param {object} employeeData - The updated data for the employee.\r\n * @returns {Promise<object>} The updated employee object.\r\n */\r\nexport const updateEmployee = async (employeeId, employeeData) => {\r\n  try {\r\n    const response = await api.put(`employees/employees/${employeeId}/`, employeeData, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error updating employee with ID ${employeeId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Deletes an employee by their ID.\r\n * @param {number} employeeId - The ID of the employee to delete.\r\n * @returns {Promise<void>}\r\n */\r\nexport const deleteEmployee = async (employeeId) => {\r\n  try {\r\n    await api.delete(`employees/employees/${employeeId}/`, getAuthHeaders());\r\n  } catch (error) {\r\n    console.error(`Error deleting employee with ID ${employeeId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ========== BANKING INFORMATION ENDPOINTS ==========\r\n\r\n/**\r\n * Fetches the current user's banking details.\r\n * @returns {Promise<object>} The current user's banking information.\r\n */\r\nexport const getMyBankingDetails = async () => {\r\n  try {\r\n    const response = await api.get('employees/employees/banking_details/', getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching my banking details:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches banking details for a specific employee by ID (admin only).\r\n * @param {number} employeeId - The ID of the employee.\r\n * @returns {Promise<object>} The employee's banking information.\r\n */\r\nexport const getBankingDetailsByEmployeeId = async (employeeId) => {\r\n  try {\r\n    const response = await api.get(`employees/employees/${employeeId}/banking_details_by_id/`, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching banking details for employee ID ${employeeId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the current user's banking details.\r\n * @param {object} bankingData - The banking data to update.\r\n * @param {string} [bankingData.bank_name] - Full bank name.\r\n * @param {string} [bankingData.bank_code] - Central Bank assigned bank code.\r\n * @param {string} [bankingData.bank_branch] - Bank branch name.\r\n * @param {string} [bankingData.bank_branch_code] - Specific branch code.\r\n * @param {string} [bankingData.bank_account_number] - Bank account number.\r\n * @param {string} [bankingData.account_type] - Type of account (savings, current, fixed).\r\n * @param {string} [bankingData.account_holder_name] - Account holder name.\r\n * @param {string} [bankingData.mobile_money_provider] - Mobile money provider.\r\n * @param {string} [bankingData.mobile_money_number] - Mobile money phone number.\r\n * @returns {Promise<object>} The updated banking information.\r\n */\r\nexport const updateMyBankingDetails = async (bankingData) => {\r\n  try {\r\n    const response = await api.put('employees/employees/update_banking_details/', bankingData, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating banking details:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Partially updates the current user's banking details.\r\n * @param {object} bankingData - The banking data to update (partial).\r\n * @returns {Promise<object>} The updated banking information.\r\n */\r\nexport const patchMyBankingDetails = async (bankingData) => {\r\n  try {\r\n    const response = await api.patch('employees/employees/update_banking_details/', bankingData, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error partially updating banking details:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches employees with incomplete banking information (admin only).\r\n * @returns {Promise<object>} Object containing count and list of employees with incomplete banking.\r\n */\r\nexport const getEmployeesWithIncompleteBanking = async () => {\r\n  try {\r\n    const response = await api.get('employees/employees/employees_with_incomplete_banking/', getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching employees with incomplete banking:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ========== BANKING UTILITY FUNCTIONS ==========\r\n\r\n/**\r\n * Validates banking information completeness.\r\n * @param {object} bankingData - The banking data to validate.\r\n * @returns {object} Validation result with isComplete flag and missing fields.\r\n */\r\nexport const validateBankingInfo = (bankingData) => {\r\n  const requiredFields = [\r\n    'bank_name',\r\n    'bank_code', \r\n    'bank_branch',\r\n    'bank_branch_code',\r\n    'bank_account_number',\r\n    'account_type'\r\n  ];\r\n  \r\n  const missingFields = requiredFields.filter(field => \r\n    !bankingData[field] || bankingData[field].toString().trim() === ''\r\n  );\r\n  \r\n  return {\r\n    isComplete: missingFields.length === 0,\r\n    missingFields: missingFields,\r\n    completionPercentage: Math.round(((requiredFields.length - missingFields.length) / requiredFields.length) * 100)\r\n  };\r\n};\r\n\r\n/**\r\n * Formats banking information for display.\r\n * @param {object} bankingData - The banking data to format.\r\n * @returns {object} Formatted banking information.\r\n */\r\nexport const formatBankingInfo = (bankingData) => {\r\n  if (!bankingData) return null;\r\n  \r\n  return {\r\n    displayName: `${bankingData.bank_name || 'Unknown Bank'}`,\r\n    fullAccountInfo: `${bankingData.bank_name || 'N/A'} - ${bankingData.bank_account_number || 'No Account'}`,\r\n    branchInfo: `${bankingData.bank_branch || 'N/A'} (${bankingData.bank_branch_code || 'N/A'})`,\r\n    accountTypeDisplay: bankingData.account_type_display || 'Not specified',\r\n    mobileMoneyInfo: bankingData.mobile_money_provider_display && bankingData.mobile_money_number \r\n      ? `${bankingData.mobile_money_provider_display}: ${bankingData.mobile_money_number}`\r\n      : 'Not configured',\r\n    isComplete: bankingData.has_complete_banking_info || false\r\n  };\r\n};\r\n\r\n/**\r\n * Gets available bank account types for dropdowns.\r\n * @returns {Array} Array of account type options.\r\n */\r\nexport const getAccountTypes = () => [\r\n  { value: 'savings', label: 'Savings Account' },\r\n  { value: 'current', label: 'Current Account' },\r\n  { value: 'fixed', label: 'Fixed Deposit Account' }\r\n];\r\n\r\n/**\r\n * Gets available mobile money providers for dropdowns.\r\n * @returns {Array} Array of mobile money provider options.\r\n */\r\nexport const getMobileMoneyProviders = () => [\r\n  { value: 'mpesa', label: 'M-Pesa (Safaricom)' },\r\n  { value: 'airtel', label: 'Airtel Money' },\r\n  { value: 'tkash', label: 'T-Kash (Telkom)' },\r\n  { value: 'equitel', label: 'Equitel' }\r\n];\r\n\r\n/**\r\n * Gets common Kenyan banks for dropdowns.\r\n * @returns {Array} Array of bank options with codes.\r\n */\r\nexport const getKenyanBanks = () => [\r\n  { name: 'KCB Bank Kenya Limited', code: '01' },\r\n  { name: 'Standard Chartered Bank Kenya Limited', code: '02' },\r\n  { name: 'Barclays Bank of Kenya Limited', code: '03' },\r\n  { name: 'Bank of Baroda (Kenya) Limited', code: '05' },\r\n  { name: 'Kenya Commercial Bank Limited', code: '01' },\r\n  { name: 'Citibank N.A Kenya', code: '16' },\r\n  { name: 'Habib Bank A.G Zurich', code: '17' },\r\n  { name: 'Middle East Bank Kenya Limited', code: '18' },\r\n  { name: 'Bank of Africa Kenya Limited', code: '19' },\r\n  { name: 'Prime Bank Limited', code: '10' },\r\n  { name: 'Co-operative Bank of Kenya Limited', code: '11' },\r\n  { name: 'National Bank of Kenya Limited', code: '12' },\r\n  { name: 'Oriental Commercial Bank Limited', code: '14' },\r\n  { name: 'Chase Bank Kenya Limited', code: '30' },\r\n  { name: 'Stanbic Bank Kenya Limited', code: '31' },\r\n  { name: 'Consolidated Bank of Kenya Limited', code: '23' },\r\n  { name: 'Credit Bank Limited', code: '25' },\r\n  { name: 'Equity Bank Kenya Limited', code: '68' },\r\n  { name: 'Family Bank Limited', code: '70' },\r\n  { name: 'Guaranty Trust Bank (Kenya) Limited', code: '53' },\r\n  { name: 'Guardian Bank Limited', code: '55' },\r\n  { name: 'Gulf African Bank Limited', code: '72' },\r\n  { name: 'I&M Bank Limited', code: '57' },\r\n  { name: 'Jamii Bora Bank Limited', code: '51' },\r\n  { name: 'UBA Kenya Bank Limited', code: '76' },\r\n  { name: 'Victoria Commercial Bank Limited', code: '54' },\r\n  { name: 'Diamond Trust Bank Kenya Limited', code: '63' },\r\n  { name: 'Ecobank Kenya Limited', code: '43' },\r\n  { name: 'Sidian Bank Limited', code: '74' },\r\n  { name: 'ABC Bank (Kenya) Limited', code: '35' },\r\n  { name: 'Mayfair Bank Limited', code: '65' }\r\n];"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
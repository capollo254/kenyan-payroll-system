{"ast":null,"code":"// src/api/auth.js\nimport axios from'axios';// The base URL for your Django backend\nexport const API_URL='http://127.0.0.1:8000/api/v1/';// Create an Axios instance with the base URL\nconst api=axios.create({baseURL:API_URL});/**\r\n * Logs in a user by sending credentials to the backend.\r\n * Upon success, stores the token and role in localStorage and sets the Authorization header.\r\n * @param {string} email - The user's email address.\r\n * @param {string} password - The user's password.\r\n * @returns {Promise<object>} The response data from the backend, including token and role.\r\n */export const login=async(email,password)=>{const response=await api.post('auth/login/',{email,password});// Store the token and role from the response\nlocalStorage.setItem('token',response.data.token);localStorage.setItem('role',response.data.role);localStorage.setItem('loginTime',new Date().toISOString());// Set the default Authorization header for all future requests\naxios.defaults.headers.common['Authorization']=\"Token \".concat(response.data.token);return response.data;};/**\r\n * Logs the user out by clearing the token and role from local storage and removing the Authorization header.\r\n */export const logout=()=>{// Clear stored data\nlocalStorage.removeItem('token');localStorage.removeItem('role');localStorage.removeItem('loginTime');delete axios.defaults.headers.common['Authorization'];// Redirect to login page\nwindow.location.href='/login';};/**\r\n * Check if user is currently authenticated\r\n */export const isAuthenticated=()=>{const token=localStorage.getItem('token');return!!token;};// Set the Authorization header on app load if a token exists in localStorage\nconst token=localStorage.getItem('token');if(token){axios.defaults.headers.common['Authorization']=\"Token \".concat(token);}// Add response interceptor to handle token expiration\napi.interceptors.response.use(response=>response,error=>{if(error.response&&error.response.status===401){// Token is invalid or expired\nconsole.log('Received 401 error, clearing token and redirecting to login');localStorage.removeItem('token');localStorage.removeItem('role');localStorage.removeItem('loginTime');delete axios.defaults.headers.common['Authorization'];window.location.href='/login';}return Promise.reject(error);});export default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","login","email","password","response","post","localStorage","setItem","data","token","role","Date","toISOString","defaults","headers","common","concat","logout","removeItem","window","location","href","isAuthenticated","getItem","interceptors","use","error","status","console","log","Promise","reject"],"sources":["C:/Users/Code_AI/Documents/Bloom HR and Payroll/kenyan-payroll-system/frontend/src/api/auth.js"],"sourcesContent":["// src/api/auth.js\r\n\r\nimport axios from 'axios';\r\n\r\n// The base URL for your Django backend\r\nexport const API_URL = 'http://127.0.0.1:8000/api/v1/';\r\n\r\n// Create an Axios instance with the base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n/**\r\n * Logs in a user by sending credentials to the backend.\r\n * Upon success, stores the token and role in localStorage and sets the Authorization header.\r\n * @param {string} email - The user's email address.\r\n * @param {string} password - The user's password.\r\n * @returns {Promise<object>} The response data from the backend, including token and role.\r\n */\r\nexport const login = async (email, password) => {\r\n  const response = await api.post('auth/login/', { email, password });\r\n  \r\n  // Store the token and role from the response\r\n  localStorage.setItem('token', response.data.token);\r\n  localStorage.setItem('role', response.data.role);\r\n  localStorage.setItem('loginTime', new Date().toISOString());\r\n\r\n  // Set the default Authorization header for all future requests\r\n  axios.defaults.headers.common['Authorization'] = `Token ${response.data.token}`;\r\n  \r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Logs the user out by clearing the token and role from local storage and removing the Authorization header.\r\n */\r\nexport const logout = () => {\r\n  // Clear stored data\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('role');\r\n  localStorage.removeItem('loginTime');\r\n  delete axios.defaults.headers.common['Authorization'];\r\n  \r\n  // Redirect to login page\r\n  window.location.href = '/login';\r\n};\r\n\r\n/**\r\n * Check if user is currently authenticated\r\n */\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;\r\n};\r\n\r\n// Set the Authorization header on app load if a token exists in localStorage\r\nconst token = localStorage.getItem('token');\r\nif (token) {\r\n  axios.defaults.headers.common['Authorization'] = `Token ${token}`;\r\n}\r\n\r\n// Add response interceptor to handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      // Token is invalid or expired\r\n      console.log('Received 401 error, clearing token and redirecting to login');\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('role');\r\n      localStorage.removeItem('loginTime');\r\n      delete axios.defaults.headers.common['Authorization'];\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,MAAO,MAAM,CAAAC,OAAO,CAAG,+BAA+B,CAEtD;AACA,KAAM,CAAAC,GAAG,CAAGF,KAAK,CAACG,MAAM,CAAC,CACvBC,OAAO,CAAEH,OACX,CAAC,CAAC,CAEF;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAI,KAAK,CAAG,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,GAAK,CAC9C,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAN,GAAG,CAACO,IAAI,CAAC,aAAa,CAAE,CAAEH,KAAK,CAAEC,QAAS,CAAC,CAAC,CAEnE;AACAG,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEH,QAAQ,CAACI,IAAI,CAACC,KAAK,CAAC,CAClDH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEH,QAAQ,CAACI,IAAI,CAACE,IAAI,CAAC,CAChDJ,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,GAAI,CAAAI,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAE3D;AACAhB,KAAK,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,UAAAC,MAAA,CAAYZ,QAAQ,CAACI,IAAI,CAACC,KAAK,CAAE,CAE/E,MAAO,CAAAL,QAAQ,CAACI,IAAI,CACtB,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAS,MAAM,CAAGA,CAAA,GAAM,CAC1B;AACAX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC,CAChCZ,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC,CAC/BZ,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC,CACpC,MAAO,CAAAtB,KAAK,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,CAErD;AACAI,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CACnC,KAAM,CAAAb,KAAK,CAAGH,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC,CAC3C,MAAO,CAAC,CAACd,KAAK,CAChB,CAAC,CAED;AACA,KAAM,CAAAA,KAAK,CAAGH,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAId,KAAK,CAAE,CACTb,KAAK,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,UAAAC,MAAA,CAAYP,KAAK,CAAE,CACnE,CAEA;AACAX,GAAG,CAAC0B,YAAY,CAACpB,QAAQ,CAACqB,GAAG,CAC1BrB,QAAQ,EAAKA,QAAQ,CACrBsB,KAAK,EAAK,CACT,GAAIA,KAAK,CAACtB,QAAQ,EAAIsB,KAAK,CAACtB,QAAQ,CAACuB,MAAM,GAAK,GAAG,CAAE,CACnD;AACAC,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC,CAC1EvB,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC,CAChCZ,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC,CAC/BZ,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC,CACpC,MAAO,CAAAtB,KAAK,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,CACrDI,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CACA,MAAO,CAAAS,OAAO,CAACC,MAAM,CAACL,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAA5B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
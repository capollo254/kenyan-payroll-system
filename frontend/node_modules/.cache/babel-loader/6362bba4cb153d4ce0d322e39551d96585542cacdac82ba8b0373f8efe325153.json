{"ast":null,"code":"// src/api/payroll.js\nimport api from'./auth';/**\r\n * Helper function to get the authentication headers.\r\n * Ensures every request includes the Authorization token.\r\n */const getAuthHeaders=()=>{const token=localStorage.getItem('token');if(!token){throw new Error(\"No authentication token found. Please log in.\");}return{headers:{Authorization:\"Token \".concat(token)}};};/**\r\n * Fetches the payslips for the logged-in user.\r\n * The backend should be configured to return only the payslips for the authenticated user.\r\n * @returns {Promise<Array>} A list of payslip objects.\r\n */export const getPayslips=async()=>{try{const response=await api.get('payroll/payslips/',getAuthHeaders());// Handle paginated response - return just the results array\nif(response.data&&typeof response.data==='object'&&'results'in response.data){return response.data.results;}// Fallback for non-paginated response\nreturn Array.isArray(response.data)?response.data:[];}catch(error){console.error('Error fetching payslips:',error);throw error;}};/**\r\n * Initiates a new payroll run by sending a POST request to the backend.\r\n * This is an admin-only action.\r\n * @param {object} runData - The data for the new payroll run (e.g., dates).\r\n * @returns {Promise<object>} The response data for the new payroll run.\r\n */export const createPayrollRun=async runData=>{try{const response=await api.post('payroll/payroll-runs/',runData,getAuthHeaders());return response.data;}catch(error){console.error('Error creating payroll run:',error);throw error;}};/**\r\n * Fetches a list of all payroll runs.\r\n * This is typically an admin-only endpoint.\r\n * @returns {Promise<Array>} A list of payroll run objects.\r\n */export const getPayrollRuns=async()=>{try{const response=await api.get('payroll/payroll-runs/?page_size=100',getAuthHeaders());// Handle paginated response\nif(response.data&&typeof response.data==='object'&&'results'in response.data){let allRuns=response.data.results;// If there are more pages, fetch them all\nif(response.data.next){let nextUrl=response.data.next;while(nextUrl){const nextResponse=await api.get(nextUrl.replace(api.defaults.baseURL,''),getAuthHeaders());allRuns=[...allRuns,...nextResponse.data.results];nextUrl=nextResponse.data.next;}}return allRuns;}// Fallback for non-paginated response\nreturn Array.isArray(response.data)?response.data:[];}catch(error){console.error('Error fetching payroll runs:',error);throw error;}};","map":{"version":3,"names":["api","getAuthHeaders","token","localStorage","getItem","Error","headers","Authorization","concat","getPayslips","response","get","data","results","Array","isArray","error","console","createPayrollRun","runData","post","getPayrollRuns","allRuns","next","nextUrl","nextResponse","replace","defaults","baseURL"],"sources":["C:/Users/Code_AI/Documents/Bloom HR and Payroll/kenyan-payroll-system/frontend/src/api/payroll.js"],"sourcesContent":["// src/api/payroll.js\r\n\r\nimport api from './auth';\r\n\r\n/**\r\n * Helper function to get the authentication headers.\r\n * Ensures every request includes the Authorization token.\r\n */\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    throw new Error(\"No authentication token found. Please log in.\");\r\n  }\r\n  return {\r\n    headers: {\r\n      Authorization: `Token ${token}`,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Fetches the payslips for the logged-in user.\r\n * The backend should be configured to return only the payslips for the authenticated user.\r\n * @returns {Promise<Array>} A list of payslip objects.\r\n */\r\nexport const getPayslips = async () => {\r\n  try {\r\n    const response = await api.get('payroll/payslips/', getAuthHeaders());\r\n    // Handle paginated response - return just the results array\r\n    if (response.data && typeof response.data === 'object' && 'results' in response.data) {\r\n      return response.data.results;\r\n    }\r\n    // Fallback for non-paginated response\r\n    return Array.isArray(response.data) ? response.data : [];\r\n  } catch (error) {\r\n    console.error('Error fetching payslips:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Initiates a new payroll run by sending a POST request to the backend.\r\n * This is an admin-only action.\r\n * @param {object} runData - The data for the new payroll run (e.g., dates).\r\n * @returns {Promise<object>} The response data for the new payroll run.\r\n */\r\nexport const createPayrollRun = async (runData) => {\r\n  try {\r\n    const response = await api.post('payroll/payroll-runs/', runData, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating payroll run:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a list of all payroll runs.\r\n * This is typically an admin-only endpoint.\r\n * @returns {Promise<Array>} A list of payroll run objects.\r\n */\r\nexport const getPayrollRuns = async () => {\r\n  try {\r\n    const response = await api.get('payroll/payroll-runs/?page_size=100', getAuthHeaders());\r\n    \r\n    // Handle paginated response\r\n    if (response.data && typeof response.data === 'object' && 'results' in response.data) {\r\n      let allRuns = response.data.results;\r\n      \r\n      // If there are more pages, fetch them all\r\n      if (response.data.next) {\r\n        let nextUrl = response.data.next;\r\n        while (nextUrl) {\r\n          const nextResponse = await api.get(nextUrl.replace(api.defaults.baseURL, ''), getAuthHeaders());\r\n          allRuns = [...allRuns, ...nextResponse.data.results];\r\n          nextUrl = nextResponse.data.next;\r\n        }\r\n      }\r\n      \r\n      return allRuns;\r\n    }\r\n    \r\n    // Fallback for non-paginated response\r\n    return Array.isArray(response.data) ? response.data : [];\r\n  } catch (error) {\r\n    console.error('Error fetching payroll runs:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}